{"ast":null,"code":"var _jsxFileName = \"/Users/thanawan/Collection/gen-ai/frontend/src/SignUpSide.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Avatar, Button, CssBaseline, TextField, Grid, Box, Typography, Container, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, IconButton, InputAdornment, Link, createTheme, ThemeProvider, styled } from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme();\nconst Paper = styled(\"div\")(({\n  theme\n}) => ({\n  marginTop: theme.spacing(8),\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  width: \"100%\"\n}));\n_c = Paper;\nconst StyledAvatar = styled(Avatar)(({\n  theme\n}) => ({\n  margin: theme.spacing(1),\n  backgroundColor: theme.palette.secondary.main\n}));\n_c2 = StyledAvatar;\nconst Form = styled(\"form\")(({\n  theme\n}) => ({\n  width: \"100%\",\n  marginTop: theme.spacing(3)\n}));\n_c3 = Form;\nconst SubmitButton = styled(Button)(({\n  theme\n}) => ({\n  margin: theme.spacing(3, 0, 2)\n}));\n_c4 = SubmitButton;\nexport default function SignUp() {\n  _s();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    allowExtraEmails: false\n  });\n\n  // State to toggle visibility for both password fields.\n  const [showPassword, setShowPassword] = useState(false);\n  const togglePasswordVisibility = () => {\n    setShowPassword(prev => !prev);\n  };\n\n  // State for showing the success popup on successful registration.\n  const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n\n  // State for email existence. If true, show error helper text on email field.\n  const [emailExists, setEmailExists] = useState(false);\n  const handleChange = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value\n    }));\n\n    // If the email field is modified, clear prior \"already registered\" error.\n    if (name === \"email\") {\n      setEmailExists(false);\n    }\n  };\n\n  // Regular expression for email format.\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  // Regular expression for password format: at least 8 characters, at least one letter and one number.\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n  const emailIsValid = emailRegex.test(formData.email);\n  const passwordIsValid = passwordRegex.test(formData.password);\n  const passwordsMatch = formData.password === formData.confirmPassword;\n\n  // The form is valid if:\n  // - All required fields (firstName, lastName, email, password, confirmPassword) are non-empty.\n  // - The email is in valid format and is not already registered.\n  // - The password meets the format.\n  // - The confirm password matches the password.\n  const isFormValid = formData.firstName.trim() !== \"\" && formData.lastName.trim() !== \"\" && formData.email.trim() !== \"\" && emailIsValid && !emailExists && formData.password.trim() !== \"\" && passwordIsValid && formData.confirmPassword.trim() !== \"\" && passwordsMatch;\n\n  // Optional: Check if email is already registered onBlur of the email field.\n  const checkEmailRegistered = async () => {\n    const email = formData.email.trim();\n    if (email === \"\") {\n      setEmailExists(false);\n      return;\n    }\n    // Only check if the email is in valid format\n    if (!emailRegex.test(email)) {\n      setEmailExists(false);\n      return;\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/check-email?email=${encodeURIComponent(email)}`);\n      const data = await response.json();\n      if (response.ok) {\n        // If data.available is false, the email is already registered.\n        setEmailExists(data.available === false);\n      } else {\n        setEmailExists(false);\n      }\n    } catch (error) {\n      console.error(\"Error checking email:\", error);\n      setEmailExists(false);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        // Open the success popup dialog.\n        setOpenSuccessDialog(true);\n      } else {\n        const data = await response.json();\n        // Instead of displaying an alert for \"Email already registered\",\n        // set the emailExists state so the email field shows the helper text.\n        if (data.message === \"Email already registered\") {\n          setEmailExists(true);\n        } else {\n          alert(`Signup failed: ${data.message || \"Unknown error\"}`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      alert(\"An error occurred. Please try again.\");\n    }\n  };\n\n  // When the user clicks OK on the popup, close it and navigate to the login page.\n  const handleDialogOk = () => {\n    setOpenSuccessDialog(false);\n    window.location.href = \"/login\"; // Update with your actual login page route if needed.\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        children: [/*#__PURE__*/_jsxDEV(StyledAvatar, {\n          children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: \"flex\",\n                gap: 2,\n                width: \"100%\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                autoComplete: \"given-name\",\n                name: \"firstName\",\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                id: \"firstName\",\n                label: \"First Name\",\n                autoFocus: true,\n                sx: {\n                  flexGrow: 1\n                },\n                value: formData.firstName,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                id: \"lastName\",\n                label: \"Last Name\",\n                name: \"lastName\",\n                autoComplete: \"family-name\",\n                sx: {\n                  flexGrow: 1\n                },\n                value: formData.lastName,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              id: \"email\",\n              label: \"Email Address\",\n              name: \"email\",\n              autoComplete: \"email\",\n              value: formData.email,\n              onChange: handleChange,\n              onBlur: checkEmailRegistered,\n              error: formData.email.trim() !== \"\" && (!emailIsValid || emailExists),\n              helperText: formData.email.trim() !== \"\" ? !emailIsValid ? \"Please enter a valid email address.\" : emailExists ? \"Email is already registered.\" : \"\" : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              name: \"password\",\n              label: \"Password\",\n              type: showPassword ? \"text\" : \"password\",\n              id: \"password\",\n              autoComplete: \"new-password\",\n              value: formData.password,\n              onChange: handleChange,\n              error: formData.password.trim() !== \"\" && !passwordIsValid,\n              helperText: formData.password.trim() !== \"\" && !passwordIsValid ? \"Password must be at least 8 characters with at least one letter and one number.\" : \"\",\n              InputProps: {\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: togglePasswordVisibility,\n                    edge: \"end\",\n                    children: showPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 27\n                    }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 274,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 21\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              name: \"confirmPassword\",\n              label: \"Confirm Password\",\n              type: showPassword ? \"text\" : \"password\",\n              id: \"confirmPassword\",\n              autoComplete: \"new-password\",\n              value: formData.confirmPassword,\n              onChange: handleChange,\n              error: formData.confirmPassword.trim() !== \"\" && !passwordsMatch,\n              helperText: formData.confirmPassword.trim() !== \"\" && !passwordsMatch ? \"Passwords do not match.\" : \"\",\n              InputProps: {\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: togglePasswordVisibility,\n                    edge: \"end\",\n                    children: showPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 27\n                    }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 21\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            disabled: !isFormValid,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justifyContent: \"flex-end\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                href: \"/\",\n                variant: \"body2\",\n                children: \"Already have an account? Sign in\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openSuccessDialog,\n      onClose: handleDialogOk,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Registration Successful\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Your account has been registered successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDialogOk,\n          color: \"primary\",\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(SignUp, \"/B4QDGtoTg+v3q5y4Qw7z825XjM=\");\n_c5 = SignUp;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Paper\");\n$RefreshReg$(_c2, \"StyledAvatar\");\n$RefreshReg$(_c3, \"Form\");\n$RefreshReg$(_c4, \"SubmitButton\");\n$RefreshReg$(_c5, \"SignUp\");","map":{"version":3,"names":["React","useState","Avatar","Button","CssBaseline","TextField","Grid","Box","Typography","Container","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","IconButton","InputAdornment","Link","createTheme","ThemeProvider","styled","LockOutlinedIcon","Visibility","VisibilityOff","jsxDEV","_jsxDEV","theme","Paper","marginTop","spacing","display","flexDirection","alignItems","width","_c","StyledAvatar","margin","backgroundColor","palette","secondary","main","_c2","Form","_c3","SubmitButton","_c4","SignUp","_s","formData","setFormData","firstName","lastName","email","password","confirmPassword","allowExtraEmails","showPassword","setShowPassword","togglePasswordVisibility","prev","openSuccessDialog","setOpenSuccessDialog","emailExists","setEmailExists","handleChange","event","name","value","type","checked","target","emailRegex","passwordRegex","emailIsValid","test","passwordIsValid","passwordsMatch","isFormValid","trim","checkEmailRegistered","response","fetch","process","env","REACT_APP_API_URL","encodeURIComponent","data","json","ok","available","error","console","handleSubmit","preventDefault","method","headers","body","JSON","stringify","message","alert","handleDialogOk","window","location","href","children","component","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","variant","noValidate","onSubmit","container","sx","gap","autoComplete","required","fullWidth","id","label","autoFocus","flexGrow","onChange","onBlur","helperText","InputProps","endAdornment","position","onClick","edge","disabled","justifyContent","item","open","onClose","color","_c5","$RefreshReg$"],"sources":["/Users/thanawan/Collection/gen-ai/frontend/src/SignUpSide.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Grid,\n  Box,\n  Typography,\n  Container,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  IconButton,\n  InputAdornment,\n  Link,\n  createTheme,\n  ThemeProvider,\n  styled,\n} from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\n\nconst theme = createTheme();\n\nconst Paper = styled(\"div\")(({ theme }) => ({\n  marginTop: theme.spacing(8),\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  width: \"100%\",\n}));\n\nconst StyledAvatar = styled(Avatar)(({ theme }) => ({\n  margin: theme.spacing(1),\n  backgroundColor: theme.palette.secondary.main,\n}));\n\nconst Form = styled(\"form\")(({ theme }) => ({\n  width: \"100%\",\n  marginTop: theme.spacing(3),\n}));\n\nconst SubmitButton = styled(Button)(({ theme }) => ({\n  margin: theme.spacing(3, 0, 2),\n}));\n\nexport default function SignUp() {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    allowExtraEmails: false,\n  });\n\n  // State to toggle visibility for both password fields.\n  const [showPassword, setShowPassword] = useState(false);\n  const togglePasswordVisibility = () => {\n    setShowPassword((prev) => !prev);\n  };\n\n  // State for showing the success popup on successful registration.\n  const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n\n  // State for email existence. If true, show error helper text on email field.\n  const [emailExists, setEmailExists] = useState(false);\n\n  const handleChange = (event) => {\n    const { name, value, type, checked } = event.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value,\n    }));\n\n    // If the email field is modified, clear prior \"already registered\" error.\n    if (name === \"email\") {\n      setEmailExists(false);\n    }\n  };\n\n  // Regular expression for email format.\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  // Regular expression for password format: at least 8 characters, at least one letter and one number.\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n\n  const emailIsValid = emailRegex.test(formData.email);\n  const passwordIsValid = passwordRegex.test(formData.password);\n  const passwordsMatch = formData.password === formData.confirmPassword;\n\n  // The form is valid if:\n  // - All required fields (firstName, lastName, email, password, confirmPassword) are non-empty.\n  // - The email is in valid format and is not already registered.\n  // - The password meets the format.\n  // - The confirm password matches the password.\n  const isFormValid =\n    formData.firstName.trim() !== \"\" &&\n    formData.lastName.trim() !== \"\" &&\n    formData.email.trim() !== \"\" &&\n    emailIsValid &&\n    !emailExists &&\n    formData.password.trim() !== \"\" &&\n    passwordIsValid &&\n    formData.confirmPassword.trim() !== \"\" &&\n    passwordsMatch;\n\n  // Optional: Check if email is already registered onBlur of the email field.\n  const checkEmailRegistered = async () => {\n    const email = formData.email.trim();\n    if (email === \"\") {\n      setEmailExists(false);\n      return;\n    }\n    // Only check if the email is in valid format\n    if (!emailRegex.test(email)) {\n      setEmailExists(false);\n      return;\n    }\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/api/check-email?email=${encodeURIComponent(\n          email\n        )}`\n      );\n      const data = await response.json();\n      if (response.ok) {\n        // If data.available is false, the email is already registered.\n        setEmailExists(data.available === false);\n      } else {\n        setEmailExists(false);\n      }\n    } catch (error) {\n      console.error(\"Error checking email:\", error);\n      setEmailExists(false);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/api/signup`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        }\n      );\n      if (response.ok) {\n        // Open the success popup dialog.\n        setOpenSuccessDialog(true);\n      } else {\n        const data = await response.json();\n        // Instead of displaying an alert for \"Email already registered\",\n        // set the emailExists state so the email field shows the helper text.\n        if (data.message === \"Email already registered\") {\n          setEmailExists(true);\n        } else {\n          alert(`Signup failed: ${data.message || \"Unknown error\"}`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      alert(\"An error occurred. Please try again.\");\n    }\n  };\n\n  // When the user clicks OK on the popup, close it and navigate to the login page.\n  const handleDialogOk = () => {\n    setOpenSuccessDialog(false);\n    window.location.href = \"/login\"; // Update with your actual login page route if needed.\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Paper>\n          <StyledAvatar>\n            <LockOutlinedIcon />\n          </StyledAvatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <Form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={2}>\n              <Box sx={{ display: \"flex\", gap: 2, width: \"100%\" }}>\n                <TextField\n                  autoComplete=\"given-name\"\n                  name=\"firstName\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"firstName\"\n                  label=\"First Name\"\n                  autoFocus\n                  sx={{ flexGrow: 1 }}\n                  value={formData.firstName}\n                  onChange={handleChange}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"lastName\"\n                  label=\"Last Name\"\n                  name=\"lastName\"\n                  autoComplete=\"family-name\"\n                  sx={{ flexGrow: 1 }}\n                  value={formData.lastName}\n                  onChange={handleChange}\n                />\n              </Box>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                onBlur={checkEmailRegistered}\n                error={\n                  formData.email.trim() !== \"\" &&\n                  (!emailIsValid || emailExists)\n                }\n                helperText={\n                  formData.email.trim() !== \"\"\n                    ? !emailIsValid\n                      ? \"Please enter a valid email address.\"\n                      : emailExists\n                      ? \"Email is already registered.\"\n                      : \"\"\n                    : \"\"\n                }\n              />\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                id=\"password\"\n                autoComplete=\"new-password\"\n                value={formData.password}\n                onChange={handleChange}\n                error={\n                  formData.password.trim() !== \"\" && !passwordIsValid\n                }\n                helperText={\n                  formData.password.trim() !== \"\" && !passwordIsValid\n                    ? \"Password must be at least 8 characters with at least one letter and one number.\"\n                    : \"\"\n                }\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={togglePasswordVisibility}\n                        edge=\"end\"\n                      >\n                        {showPassword ? (\n                          <VisibilityOff />\n                        ) : (\n                          <Visibility />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"confirmPassword\"\n                label=\"Confirm Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                id=\"confirmPassword\"\n                autoComplete=\"new-password\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                error={\n                  formData.confirmPassword.trim() !== \"\" && !passwordsMatch\n                }\n                helperText={\n                  formData.confirmPassword.trim() !== \"\" && !passwordsMatch\n                    ? \"Passwords do not match.\"\n                    : \"\"\n                }\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={togglePasswordVisibility}\n                        edge=\"end\"\n                      >\n                        {showPassword ? (\n                          <VisibilityOff />\n                        ) : (\n                          <Visibility />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Grid>\n            <SubmitButton\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              disabled={!isFormValid}\n            >\n              Sign Up\n            </SubmitButton>\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item>\n                <Link href=\"/\" variant=\"body2\">\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </Form>\n        </Paper>\n      </Container>\n\n      {/* Success Popup Dialog */}\n      <Dialog open={openSuccessDialog} onClose={handleDialogOk}>\n        <DialogTitle>Registration Successful</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Your account has been registered successfully.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogOk} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </ThemeProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}