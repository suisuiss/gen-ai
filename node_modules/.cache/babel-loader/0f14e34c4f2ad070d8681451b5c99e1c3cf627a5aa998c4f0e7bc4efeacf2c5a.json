{"ast":null,"code":"var _jsxFileName = \"/Users/thanawan/Collection/gen-ai/frontend/src/SignUpSide.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Avatar, Button, CssBaseline, TextField, Grid, Box, Typography, Container, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, IconButton, InputAdornment, Link, createTheme, ThemeProvider, styled } from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme();\nconst Paper = styled(\"div\")(({\n  theme\n}) => ({\n  marginTop: theme.spacing(8),\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  width: \"100%\"\n}));\n_c = Paper;\nconst StyledAvatar = styled(Avatar)(({\n  theme\n}) => ({\n  margin: theme.spacing(1),\n  backgroundColor: theme.palette.secondary.main\n}));\n_c2 = StyledAvatar;\nconst Form = styled(\"form\")(({\n  theme\n}) => ({\n  width: \"100%\",\n  marginTop: theme.spacing(3)\n}));\n_c3 = Form;\nconst SubmitButton = styled(Button)(({\n  theme\n}) => ({\n  margin: theme.spacing(3, 0, 2)\n}));\n_c4 = SubmitButton;\nexport default function SignUp() {\n  _s();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    allowExtraEmails: false\n  });\n\n  // State to toggle visibility of both password fields.\n  const [showPassword, setShowPassword] = useState(false);\n  const togglePasswordVisibility = () => {\n    setShowPassword(prev => !prev);\n  };\n\n  // State to control the popup dialog shown on successful registration.\n  const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n\n  // State for checking if the email is already registered.\n  const [emailExists, setEmailExists] = useState(false);\n  const handleChange = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value\n    }));\n  };\n\n  // Regular expression for email format.\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  // Regular expression for password format: at least 8 characters, at least one letter & one number.\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n  const emailIsValid = emailRegex.test(formData.email);\n  const passwordIsValid = passwordRegex.test(formData.password);\n  const passwordsMatch = formData.password === formData.confirmPassword;\n\n  // The form is valid if:\n  // - All required fields (firstName, lastName, email, password, confirmPassword) are non-empty.\n  // - The email is in valid format and is NOT already registered.\n  // - The password meets the format.\n  // - The confirm password matches the password.\n  const isFormValid = formData.firstName.trim() !== \"\" && formData.lastName.trim() !== \"\" && formData.email.trim() !== \"\" && emailIsValid && !emailExists && formData.password.trim() !== \"\" && passwordIsValid && formData.confirmPassword.trim() !== \"\" && passwordsMatch;\n\n  // Check if the email is already registered when the user leaves the email field.\n  const checkEmailRegistered = async () => {\n    const email = formData.email.trim();\n    if (email === \"\") {\n      setEmailExists(false);\n      return;\n    }\n    // Only check if the email is in a valid format.\n    if (!emailRegex.test(email)) {\n      setEmailExists(false);\n      return;\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/check-email?email=${encodeURIComponent(email)}`);\n      const data = await response.json();\n      if (response.ok) {\n        // If available is false, the email is already registered.\n        setEmailExists(data.available === false);\n      } else {\n        // On error, do not mark as already registered.\n        setEmailExists(false);\n      }\n    } catch (error) {\n      console.error(\"Error checking email:\", error);\n      setEmailExists(false);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        // Open the success popup dialog.\n        setOpenSuccessDialog(true);\n      } else {\n        const data = await response.json();\n        // Use an inline alert here or adjust as needed.\n        alert(`Signup failed: ${data.message || \"Unknown error\"}`);\n      }\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      alert(\"An error occurred. Please try again.\");\n    }\n  };\n\n  // When the user clicks OK on the popup dialog, close it and navigate to the login page.\n  const handleDialogOk = () => {\n    setOpenSuccessDialog(false);\n    window.location.href = \"/login\"; // Update this route if needed.\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        children: [/*#__PURE__*/_jsxDEV(StyledAvatar, {\n          children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: \"flex\",\n                gap: 2,\n                width: \"100%\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                autoComplete: \"given-name\",\n                name: \"firstName\",\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                id: \"firstName\",\n                label: \"First Name\",\n                autoFocus: true,\n                sx: {\n                  flexGrow: 1\n                },\n                value: formData.firstName,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                required: true,\n                fullWidth: true,\n                id: \"lastName\",\n                label: \"Last Name\",\n                name: \"lastName\",\n                autoComplete: \"family-name\",\n                sx: {\n                  flexGrow: 1\n                },\n                value: formData.lastName,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              id: \"email\",\n              label: \"Email Address\",\n              name: \"email\",\n              autoComplete: \"email\",\n              value: formData.email,\n              onChange: handleChange,\n              onBlur: checkEmailRegistered,\n              error: formData.email.trim() !== \"\" && (!emailIsValid || emailExists),\n              helperText: formData.email.trim() !== \"\" ? !emailIsValid ? \"Please enter a valid email address.\" : emailExists ? \"Email is already registered.\" : \"\" : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              name: \"password\",\n              label: \"Password\",\n              type: showPassword ? \"text\" : \"password\",\n              id: \"password\",\n              autoComplete: \"new-password\",\n              value: formData.password,\n              onChange: handleChange,\n              error: formData.password.trim() !== \"\" && !passwordIsValid,\n              helperText: formData.password.trim() !== \"\" && !passwordIsValid ? \"Password must be at least 8 characters with at least one letter and one number.\" : \"\",\n              InputProps: {\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: togglePasswordVisibility,\n                    edge: \"end\",\n                    children: showPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 263,\n                      columnNumber: 53\n                    }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 265,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 41\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"outlined\",\n              required: true,\n              fullWidth: true,\n              name: \"confirmPassword\",\n              label: \"Confirm Password\",\n              type: showPassword ? \"text\" : \"password\",\n              id: \"confirmPassword\",\n              autoComplete: \"new-password\",\n              value: formData.confirmPassword,\n              onChange: handleChange,\n              error: formData.confirmPassword.trim() !== \"\" && !passwordsMatch,\n              helperText: formData.confirmPassword.trim() !== \"\" && !passwordsMatch ? \"Passwords do not match.\" : \"\",\n              InputProps: {\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: togglePasswordVisibility,\n                    edge: \"end\",\n                    children: showPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 299,\n                      columnNumber: 53\n                    }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 301,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 294,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 41\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            disabled: !isFormValid,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justifyContent: \"flex-end\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                href: \"/\",\n                variant: \"body2\",\n                children: \"Already have an account? Sign in\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openSuccessDialog,\n      onClose: handleDialogOk,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Registration Successful\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Your account has been registered successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDialogOk,\n          color: \"primary\",\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n}\n_s(SignUp, \"LjXtwpBornStgUcEfDZMxFk+sDs=\");\n_c5 = SignUp;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Paper\");\n$RefreshReg$(_c2, \"StyledAvatar\");\n$RefreshReg$(_c3, \"Form\");\n$RefreshReg$(_c4, \"SubmitButton\");\n$RefreshReg$(_c5, \"SignUp\");","map":{"version":3,"names":["React","useState","Avatar","Button","CssBaseline","TextField","Grid","Box","Typography","Container","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","IconButton","InputAdornment","Link","createTheme","ThemeProvider","styled","LockOutlinedIcon","Visibility","VisibilityOff","jsxDEV","_jsxDEV","theme","Paper","marginTop","spacing","display","flexDirection","alignItems","width","_c","StyledAvatar","margin","backgroundColor","palette","secondary","main","_c2","Form","_c3","SubmitButton","_c4","SignUp","_s","formData","setFormData","firstName","lastName","email","password","confirmPassword","allowExtraEmails","showPassword","setShowPassword","togglePasswordVisibility","prev","openSuccessDialog","setOpenSuccessDialog","emailExists","setEmailExists","handleChange","event","name","value","type","checked","target","emailRegex","passwordRegex","emailIsValid","test","passwordIsValid","passwordsMatch","isFormValid","trim","checkEmailRegistered","response","fetch","process","env","REACT_APP_API_URL","encodeURIComponent","data","json","ok","available","error","console","handleSubmit","preventDefault","method","headers","body","JSON","stringify","alert","message","handleDialogOk","window","location","href","children","component","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","variant","noValidate","onSubmit","container","sx","gap","autoComplete","required","fullWidth","id","label","autoFocus","flexGrow","onChange","onBlur","helperText","InputProps","endAdornment","position","onClick","edge","disabled","justifyContent","item","open","onClose","color","_c5","$RefreshReg$"],"sources":["/Users/thanawan/Collection/gen-ai/frontend/src/SignUpSide.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n    Avatar,\n    Button,\n    CssBaseline,\n    TextField,\n    Grid,\n    Box,\n    Typography,\n    Container,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    IconButton,\n    InputAdornment,\n    Link,\n    createTheme,\n    ThemeProvider,\n    styled,\n} from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\n\nconst theme = createTheme();\n\nconst Paper = styled(\"div\")(({ theme }) => ({\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    width: \"100%\",\n}));\n\nconst StyledAvatar = styled(Avatar)(({ theme }) => ({\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n}));\n\nconst Form = styled(\"form\")(({ theme }) => ({\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n}));\n\nconst SubmitButton = styled(Button)(({ theme }) => ({\n    margin: theme.spacing(3, 0, 2),\n}));\n\nexport default function SignUp() {\n    const [formData, setFormData] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        allowExtraEmails: false,\n    });\n\n    // State to toggle visibility of both password fields.\n    const [showPassword, setShowPassword] = useState(false);\n    const togglePasswordVisibility = () => {\n        setShowPassword((prev) => !prev);\n    };\n\n    // State to control the popup dialog shown on successful registration.\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n\n    // State for checking if the email is already registered.\n    const [emailExists, setEmailExists] = useState(false);\n\n    const handleChange = (event) => {\n        const { name, value, type, checked } = event.target;\n        setFormData((prev) => ({\n            ...prev,\n            [name]: type === \"checkbox\" ? checked : value,\n        }));\n    };\n\n    // Regular expression for email format.\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    // Regular expression for password format: at least 8 characters, at least one letter & one number.\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n\n    const emailIsValid = emailRegex.test(formData.email);\n    const passwordIsValid = passwordRegex.test(formData.password);\n    const passwordsMatch = formData.password === formData.confirmPassword;\n\n    // The form is valid if:\n    // - All required fields (firstName, lastName, email, password, confirmPassword) are non-empty.\n    // - The email is in valid format and is NOT already registered.\n    // - The password meets the format.\n    // - The confirm password matches the password.\n    const isFormValid =\n        formData.firstName.trim() !== \"\" &&\n        formData.lastName.trim() !== \"\" &&\n        formData.email.trim() !== \"\" &&\n        emailIsValid &&\n        !emailExists &&\n        formData.password.trim() !== \"\" &&\n        passwordIsValid &&\n        formData.confirmPassword.trim() !== \"\" &&\n        passwordsMatch;\n\n    // Check if the email is already registered when the user leaves the email field.\n    const checkEmailRegistered = async () => {\n        const email = formData.email.trim();\n        if (email === \"\") {\n            setEmailExists(false);\n            return;\n        }\n        // Only check if the email is in a valid format.\n        if (!emailRegex.test(email)) {\n            setEmailExists(false);\n            return;\n        }\n        try {\n            const response = await fetch(\n                `${process.env.REACT_APP_API_URL}/api/check-email?email=${encodeURIComponent(\n                    email\n                )}`\n            );\n            const data = await response.json();\n            if (response.ok) {\n                // If available is false, the email is already registered.\n                setEmailExists(data.available === false);\n            } else {\n                // On error, do not mark as already registered.\n                setEmailExists(false);\n            }\n        } catch (error) {\n            console.error(\"Error checking email:\", error);\n            setEmailExists(false);\n        }\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            const response = await fetch(\n                `${process.env.REACT_APP_API_URL}/api/signup`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(formData),\n                }\n            );\n            if (response.ok) {\n                // Open the success popup dialog.\n                setOpenSuccessDialog(true);\n            } else {\n                const data = await response.json();\n                // Use an inline alert here or adjust as needed.\n                alert(`Signup failed: ${data.message || \"Unknown error\"}`);\n            }\n        } catch (error) {\n            console.error(\"Signup error:\", error);\n            alert(\"An error occurred. Please try again.\");\n        }\n    };\n\n    // When the user clicks OK on the popup dialog, close it and navigate to the login page.\n    const handleDialogOk = () => {\n        setOpenSuccessDialog(false);\n        window.location.href = \"/login\"; // Update this route if needed.\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Paper>\n                    <StyledAvatar>\n                        <LockOutlinedIcon />\n                    </StyledAvatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign up\n                    </Typography>\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Grid container spacing={2}>\n                            <Box sx={{ display: \"flex\", gap: 2, width: \"100%\" }}>\n                                <TextField\n                                    autoComplete=\"given-name\"\n                                    name=\"firstName\"\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    autoFocus\n                                    sx={{ flexGrow: 1 }}\n                                    value={formData.firstName}\n                                    onChange={handleChange}\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"family-name\"\n                                    sx={{ flexGrow: 1 }}\n                                    value={formData.lastName}\n                                    onChange={handleChange}\n                                />\n                            </Box>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                value={formData.email}\n                                onChange={handleChange}\n                                onBlur={checkEmailRegistered}\n                                error={\n                                    formData.email.trim() !== \"\" &&\n                                    (!emailIsValid || emailExists)\n                                }\n                                helperText={\n                                    formData.email.trim() !== \"\"\n                                        ? !emailIsValid\n                                            ? \"Please enter a valid email address.\"\n                                            : emailExists\n                                                ? \"Email is already registered.\"\n                                                : \"\"\n                                        : \"\"\n                                }\n                            />\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type={showPassword ? \"text\" : \"password\"}\n                                id=\"password\"\n                                autoComplete=\"new-password\"\n                                value={formData.password}\n                                onChange={handleChange}\n                                error={\n                                    formData.password.trim() !== \"\" && !passwordIsValid\n                                }\n                                helperText={\n                                    formData.password.trim() !== \"\" && !passwordIsValid\n                                        ? \"Password must be at least 8 characters with at least one letter and one number.\"\n                                        : \"\"\n                                }\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <IconButton\n                                                onClick={togglePasswordVisibility}\n                                                edge=\"end\"\n                                            >\n                                                {showPassword ? (\n                                                    <VisibilityOff />\n                                                ) : (\n                                                    <Visibility />\n                                                )}\n                                            </IconButton>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                name=\"confirmPassword\"\n                                label=\"Confirm Password\"\n                                type={showPassword ? \"text\" : \"password\"}\n                                id=\"confirmPassword\"\n                                autoComplete=\"new-password\"\n                                value={formData.confirmPassword}\n                                onChange={handleChange}\n                                error={\n                                    formData.confirmPassword.trim() !== \"\" && !passwordsMatch\n                                }\n                                helperText={\n                                    formData.confirmPassword.trim() !== \"\" && !passwordsMatch\n                                        ? \"Passwords do not match.\"\n                                        : \"\"\n                                }\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <IconButton\n                                                onClick={togglePasswordVisibility}\n                                                edge=\"end\"\n                                            >\n                                                {showPassword ? (\n                                                    <VisibilityOff />\n                                                ) : (\n                                                    <Visibility />\n                                                )}\n                                            </IconButton>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </Grid>\n                        <SubmitButton\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            disabled={!isFormValid}\n                        >\n                            Sign Up\n                        </SubmitButton>\n                        <Grid container justifyContent=\"flex-end\">\n                            <Grid item>\n                                <Link href=\"/\" variant=\"body2\">\n                                    Already have an account? Sign in\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Form>\n                </Paper>\n            </Container>\n\n            {/* Success Popup Dialog */}\n            <Dialog open={openSuccessDialog} onClose={handleDialogOk}>\n                <DialogTitle>Registration Successful</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Your account has been registered successfully.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogOk} color=\"primary\">\n                        OK\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </ThemeProvider>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}