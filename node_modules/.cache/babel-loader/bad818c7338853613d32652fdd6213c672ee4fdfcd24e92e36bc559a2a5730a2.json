{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName } from '@mui/utils';\nimport makeStyles from \"../makeStyles/index.js\";\nimport getThemeProps from \"../getThemeProps/index.js\";\nimport useTheme from \"../useTheme/index.js\";\n\n// Link a style sheet with a component.\n// It does not modify the component passed to it;\n// instead, it returns a new component, with a `classes` property.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst withStyles = (stylesOrCreator, options = {}) => Component => {\n  const {\n    defaultTheme,\n    withTheme = false,\n    name,\n    ...stylesOptions\n  } = options;\n  if (process.env.NODE_ENV !== 'production') {\n    if (Component === undefined) {\n      throw new Error(['You are calling withStyles(styles)(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n    }\n  }\n  let classNamePrefix = name;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!name) {\n      // Provide a better DX outside production.\n      const displayName = getDisplayName(Component);\n      if (displayName !== undefined) {\n        classNamePrefix = displayName;\n      }\n    }\n  }\n  const useStyles = makeStyles(stylesOrCreator, {\n    defaultTheme,\n    Component,\n    name: name || Component.displayName,\n    classNamePrefix,\n    ...stylesOptions\n  });\n  const WithStyles = /*#__PURE__*/React.forwardRef(function WithStyles(props, ref) {\n    const {\n      classes: classesProp,\n      ...other\n    } = props;\n    // The wrapper receives only user supplied props, which could be a subset of\n    // the actual props Component might receive due to merging with defaultProps.\n    // So copying it here would give us the same result in the wrapper as well.\n    const classes = useStyles({\n      ...Component.defaultProps,\n      ...props\n    });\n    let theme;\n    let more = other;\n    if (typeof name === 'string' || withTheme) {\n      // name and withTheme are invariant in the outer scope\n      // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      theme = useTheme() || defaultTheme;\n      if (name) {\n        more = getThemeProps({\n          theme,\n          name,\n          props: other\n        });\n      }\n\n      // Provide the theme to the wrapped component.\n      // So we don't have to use the `withTheme()` Higher-order Component.\n      if (withTheme && !more.theme) {\n        more.theme = theme;\n      }\n    }\n    return /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      classes: classes,\n      ...more\n    });\n  });\n  process.env.NODE_ENV !== \"production\" ? WithStyles.propTypes = {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes: PropTypes.object\n  } : void 0;\n  if (process.env.NODE_ENV !== 'production') {\n    WithStyles.displayName = `WithStyles(${getDisplayName(Component)})`;\n  }\n  hoistNonReactStatics(WithStyles, Component);\n  if (process.env.NODE_ENV !== 'production') {\n    // Exposed for test purposes.\n    WithStyles.Naked = Component;\n    WithStyles.options = options;\n    WithStyles.useStyles = useStyles;\n  }\n  return WithStyles;\n};\nexport default withStyles;","map":{"version":3,"names":["React","PropTypes","hoistNonReactStatics","getDisplayName","makeStyles","getThemeProps","useTheme","jsx","_jsx","withStyles","stylesOrCreator","options","Component","defaultTheme","withTheme","name","stylesOptions","process","env","NODE_ENV","undefined","Error","join","classNamePrefix","displayName","useStyles","WithStyles","forwardRef","props","ref","classes","classesProp","other","defaultProps","theme","more","propTypes","object","Naked"],"sources":["/Users/thanawan/Collection/gen-ai/frontend/node_modules/@mui/styles/withStyles/withStyles.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName } from '@mui/utils';\nimport makeStyles from \"../makeStyles/index.js\";\nimport getThemeProps from \"../getThemeProps/index.js\";\nimport useTheme from \"../useTheme/index.js\";\n\n// Link a style sheet with a component.\n// It does not modify the component passed to it;\n// instead, it returns a new component, with a `classes` property.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst withStyles = (stylesOrCreator, options = {}) => Component => {\n  const {\n    defaultTheme,\n    withTheme = false,\n    name,\n    ...stylesOptions\n  } = options;\n  if (process.env.NODE_ENV !== 'production') {\n    if (Component === undefined) {\n      throw new Error(['You are calling withStyles(styles)(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n    }\n  }\n  let classNamePrefix = name;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!name) {\n      // Provide a better DX outside production.\n      const displayName = getDisplayName(Component);\n      if (displayName !== undefined) {\n        classNamePrefix = displayName;\n      }\n    }\n  }\n  const useStyles = makeStyles(stylesOrCreator, {\n    defaultTheme,\n    Component,\n    name: name || Component.displayName,\n    classNamePrefix,\n    ...stylesOptions\n  });\n  const WithStyles = /*#__PURE__*/React.forwardRef(function WithStyles(props, ref) {\n    const {\n      classes: classesProp,\n      ...other\n    } = props;\n    // The wrapper receives only user supplied props, which could be a subset of\n    // the actual props Component might receive due to merging with defaultProps.\n    // So copying it here would give us the same result in the wrapper as well.\n    const classes = useStyles({\n      ...Component.defaultProps,\n      ...props\n    });\n    let theme;\n    let more = other;\n    if (typeof name === 'string' || withTheme) {\n      // name and withTheme are invariant in the outer scope\n      // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      theme = useTheme() || defaultTheme;\n      if (name) {\n        more = getThemeProps({\n          theme,\n          name,\n          props: other\n        });\n      }\n\n      // Provide the theme to the wrapped component.\n      // So we don't have to use the `withTheme()` Higher-order Component.\n      if (withTheme && !more.theme) {\n        more.theme = theme;\n      }\n    }\n    return /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      classes: classes,\n      ...more\n    });\n  });\n  process.env.NODE_ENV !== \"production\" ? WithStyles.propTypes = {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes: PropTypes.object\n  } : void 0;\n  if (process.env.NODE_ENV !== 'production') {\n    WithStyles.displayName = `WithStyles(${getDisplayName(Component)})`;\n  }\n  hoistNonReactStatics(WithStyles, Component);\n  if (process.env.NODE_ENV !== 'production') {\n    // Exposed for test purposes.\n    WithStyles.Naked = Component;\n    WithStyles.options = options;\n    WithStyles.useStyles = useStyles;\n  }\n  return WithStyles;\n};\nexport default withStyles;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}